set nocompatible               " be iMproved
set encoding=utf-8
filetype off                   " required!
set nobackup

execute pathogen#infect()
syntax on
filetype plugin indent on

" Set leader to ,
let mapleader=","
let maplocalleader="\\"


" vim-scripts
"
" Bundle: tComment
" Bundle: ack.vim
" Bundle: Align
" Bundle: paredit.vim

" GitHub
"
" Bundle: phongnh/vim-tmux
" Bundle: SirVer/ultisnips
" Bundle: JazzCore/neocomplcache-ultisnips
" Bundle: kana/vim-textobj-user
" Bundle: scrooloose/syntastic
" -Bundle: scrooloose/nerdtree
" Bundle: tpope/vim-sensible
" Bundle: tpope/vim-haml
" Bundle: tpope/vim-fugitive
" Bundle: tpope/vim-bundler
" Bundle: tpope/vim-eunuch
" Bundle: tpope/vim-rails
" Bundle: tpope/vim-unimpaired
" Bundle: tpope/vim-surround
" Bundle: tpope/vim-repeat
" Bundle: tpope/vim-abolish
" Bundle: tpope/vim-endwise
" Bundle: tpope/vim-fireplace
" Bundle: tpope/vim-classpath
" Bundle: tpope/vim-scriptease
" Bundle: tpope/vim-obsession
" Bundle: tpope/vim-jdaddy
" Bundle: tpope/vim-vinegar
" Bundle: tpope/vim-tbone
" Bundle: tpope/vim-rbenv
" Bundle: tpope/vim-characterize
" Bundle: tpope/vim-ragtag
" -Bundle: tpope/vim-sexp-mappings-for-regular-people
" Bundle: kchmck/vim-coffee-script
" Bundle: ledger/vim-ledger
" Bundle: guns/vim-clojure-static
" -Bundle: guns/vim-sexp
" Bundle: wlangstroth/vim-haskell
" Bundle: Shougo/neocomplcache
" Bundle: Shougo/unite.vim
" Bundle: Shougo/vimproc.vim
" BundleCommand: make
" Bundle: ervandew/supertab
" Bundle: briandoll/change-inside-surroundings.vim
" Bundle: sjl/gundo.vim
" Bundle: sjl/clam.vim
" Bundle: sjl/vitality.vim
" Bundle: mattn/webapi-vim
" Bundle: mattn/gist-vim
" Bundle: vim-ruby/vim-ruby
" Bundle: rking/ag.vim
" Bundle: jszakmeister/vim-togglecursor
" Bundle: jonathanfilip/vim-lucius
" Bundle: plasticboy/vim-markdown
" Bundle: chriskempson/base16-vim
" Bundle: bling/vim-airline
" Bundle: maxbrunsfeld/vim-yankstack
" Bundle: kien/rainbow_parentheses.vim
" -Bundle: kien/ctrlp.vim
" Bundle: terryma/vim-multiple-cursors
" -Bundle: goldfeld/vim-seek
" Bundle: wellle/targets.vim
" Bundle: rodjek/vim-puppet
" Bundle: cwoac/nvim

let g:multi_cursor_use_default_mapping=1
" let g:multi_cursor_next_key='<C-n>'
" let g:multi_cursor_prev_key='<C-p>'
" let g:multi_cursor_skip_key='<C-x>'
" let g:multi_cursor_quit_key='<Esc>'

let g:vim_markdown_folding_disabled=1
let g:macvim_hig_shift_movement=1

if exists("TComment")
  map <silent><leader>/ :TComment<CR>
endif

let g:neocomplcache_enable_fuzzy_completion = 3

if has('gui_running')
  set guifont=Source\ Code\ Pro\ Medium:h14
  set guioptions-=T
  set guicursor+=n-v-c:blinkon0
  set linespace=0
endif

silent! colorscheme lucius
set background=dark

" ----------------------------------------
" Regular Vim Configuartion (No Plugins Needed)
" ----------------------------------------
set keymodel=startsel
set mousemodel=popup

" ---------------
" UI
" ---------------
set nu  " Line numbers on
set numberwidth=5      " don't plan on editing files longer than 65535 lines
set nowrap  " Line wrapping on
set linebreak "Break lines a little smarter
set textwidth=78
set colorcolumn=+1
set cmdheight=2
set wildmode=full
set cursorline

" These can affect plugins (beware)
nnoremap j gj
nnoremap k gk

" ---------------
" Behaviors
" ---------------
set hidden             " Change buffer - without saving
set history=768        " Number of things to remember in history.
set cf                 " Enable error files & error jumping.
set clipboard+=unnamed " Yanks go on clipboard instead.
set timeoutlen=1000     " Time to wait for a command (after leader for example)
set foldlevelstart=99  " Remove folds
set formatoptions=crql

" ---------------
" Text Format
" ---------------
set tabstop=2
set shiftwidth=2  " Tabs under smart indent
set expandtab
set backspace=2

" ---------------
" Searching
" ---------------
set smartcase " Case insensitive search
set nohlsearch

" ---------------
" Visual
" ---------------
set matchtime=2 " How many tenths of a second to blink

" ---------------
" Sounds
" ---------------
set noerrorbells
set novisualbell

" ---------------
" Mouse
" ---------------
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes

" Window Movement
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-l> :wincmd l<CR>

" spell
nmap <silent> <leader>s :set spell!<CR>

" source vimrc and runtime
nmap <silent> <leader>v :Runtime<CR>

" ----------------------------------------
" Auto Commands
"
if has("autocmd")
  " disable auto-wrap when editing .vimrc
  autocmd BufRead .vimrc :set formatoptions-=c

  " auto-wrap when editing text files
  autocmd BufRead *.txt :set formatoptions+=a

  " No more complaining about untitled documents
  " autocmd FocusLost * nested silent! wall

  " When editing a file, always jump to the last cursor position.
  " This must be after the uncompress commands.
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line ("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

  " strip trailing whitespace
  autocmd BufWritePre * :%s/\s\+$//e

  " recognize Markdown
  autocmd BufNewFile,BufRead *.md  set filetype=markdown

  " recognize Apple sandbox files
  autocmd BufRead *.sb             setf scheme

  " recognize haml and hamlc
  autocmd BufNewFile,BufRead *.hamlc  setf haml

endif

if exists("RainbowParenthesesActivate")
  au VimEnter * RainbowParenthesesActivate
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces
endif

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap


" remap escape insert mode
" inoremap lk <Esc>

" https://ariejan.net/2012/03/21/from-11-34s-to-0-625s-for-opening-a-rb-file-in-vim/
if !empty($MY_RUBY_HOME)
  let g:ruby_path = join(split(glob($MY_RUBY_HOME.'/lib/ruby/*.*')."\n"
    \ .glob($MY_RUBY_HOME.'/lib/ruby/site_ruby/*.*')."\n"
    \ .glob($MY_RUBY_HOME.'/lib/ruby/vendor_ruby/*.*')."\n"
    \ .glob($MY_RUBY_HOME.'/lib/ruby/user-gems/*.*'),"\n"),',')
endif

set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set fillchars=vert:â”‚


set keymap=russian-jcukenwin
" remap layout switch
imap <C-L> <C-^>
" setlocal spell spelllang=ru_yo,en_us
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Blue

set foldmethod=indent

if exists("Clam")
  nnoremap ! :Clam<space>
  vnoremap ! :ClamVisual<space>
endif

if exists("Ag")
  nmap <Leader>a :Ag<space>
endif

if exists("GitGrep")
  nmap <Leader>A :GitGrep<space>
endif

nmap <c-w><c-c> <c-w>c
nmap <c-c><c-;> <c-w>c

" disable haml checker -- it's horribly slow
let g:loaded_syntastic_haml_haml_checker=1

set undodir=~/.cache/vim/undo
set directory=~/.cache/vim/swap


let g:browser = 'open'

function! OpenGitHub(keyword)
  let url = 'https://github.com/'.a:keyword
  exec '!' g:browser url '&'
endfunction
noremap gGH :call OpenGitHub(expand('<cWORD>'))<CR><CR>


nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

nmap <C-x>g :Gstatus<CR>
nmap <C-x>; :

let g:unite_enable_split_vertically = 1
let g:unite_enable_short_source_names = 1
let g:unite_enable_ignore_case = 1

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
  " Overwrite settings.
  imap <buffer> qq <Plug>(unite_exit)
  imap <buffer> jj <Plug>(unite_insert_leave)
  imap <buffer> kk <Plug>(unite_insert_leave)
endfunction

if exists("Unite")
  nnoremap <silent> <leader>ff :<C-U>Unite file<CR>
  nnoremap <silent> <leader>fb :<C-U>Unite file buffer -start-insert<CR>
  nnoremap <silent> <leader>fr :<C-U>Unite file_rec/async -start-insert<CR>
  nnoremap <silent> <leader>dr :<C-U>Unite directory_rec/async<CR>
  nnoremap <silent> <leader>gf :<C-U>UniteWithCursorWord file_rec/async -start-insert<CR>
  nnoremap <silent> <leader>fn :<C-U>Unite file/new -start-insert<CR>
  nnoremap <silent> <leader>b  :<C-U>Unite buffer bookmark<CR>
  nnoremap <silent> <leader>rr :<C-U>Unite register<CR>
endif

autocmd BufRead .vimrc :iab <buffer> bu Bundle:


