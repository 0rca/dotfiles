" ocaml wants it
" set rtp^="/Users/0rca/.opam/system/share/ocp-indent/vim"

if &term =~ '256color'
  " disable Background Color Erase (BCE)
  set t_ut=
endif

set nocompatible               " be iMproved
set encoding=utf-8
runtime macros/matchit.vim

" Set leader to ,
let mapleader=","
" let maplocalleader="\\"

if filereadable(expand("~/.vimrc_background"))
  " Access colors present in 256 colorspace
  let base16colorspace=256
  source ~/.vimrc_background
endif

" Plug section
call plug#begin()

Plug 'airblade/vim-gitgutter'
Plug 'andyl/vim-textobj-elixir'
Plug 'benmills/vimux'
Plug 'bling/vim-bufferline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'derekelkins/agda-vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'elixir-editors/vim-elixir'
Plug 'itchyny/lightline.vim'
Plug 'jonathanfilip/vim-lucius'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'kana/vim-textobj-user'
Plug 'ledger/vim-ledger'
Plug 'LnL7/vim-nix'
Plug 'mileszs/ack.vim'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'purescript-contrib/purescript-vim'
Plug 'rizzatti/dash.vim'
Plug 'roxma/vim-tmux-clipboard'
Plug 'terryma/vim-multiple-cursors'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-tbone'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-scripts/argtextobj.vim'
Plug 'vim-scripts/tComment'
Plug 'wakatime/vim-wakatime'

call plug#end()
" End plug section

" Use deoplete.
let g:deoplete#enable_at_startup = 0

" Automatically displays all buffers when there's only one tab open
let g:airline#extensions#tabline#enabled = 1

let g:jsx_ext_required = 0

" elm-vim configuration
let g:elm_format_autosave = 1

let g:multi_cursor_use_default_mapping=1
" let g:multi_cursor_next_key='<C-n>'
" let g:multi_cursor_prev_key='<C-p>'
" let g:multi_cursor_skip_key='<C-x>'
" let g:multi_cursor_quit_key='<C-c>'

let g:vim_markdown_folding_disabled=1
let g:macvim_hig_shift_movement=1

let g:acp_enableAtStartup = 1

if executable('rg')
  let g:ackprg = 'rg --vimgrep'
end

" close netrw buffer automatically
let g:netrw_fastbrowse = 0
let g:netrw_banner = 0
"
" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

if has('gui_running')
  set guifont=SF Mono Regular:h11
  set guioptions=egm
  set guicursor+=n-v-c:blinkon0
  set linespace=0
  " set fullscreen
  silent colorscheme lucius
  if $DARK_MODE == 'true'
    set background=dark
  else
    set background=light
  end
else
  set guifont=SF\ Mono\ Regular:h11
  " set fullscreen
  set t_Co=256 " 256 color mode
  set guicursor+=n-v-c:blinkon0
  colorscheme lucius
  if $DARK_MODE == 'true'
    set background=dark
  else
    set background=light
  end
endif

" Airline configuration
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#fnamemod = ':t'

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
xmap <CR> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ----------------------------------------
" Regular Vim Configuration (No Plugins Needed)
" ----------------------------------------
set keymodel=startsel
set mousemodel=popup

" ---------------
" UI
" ---------------
set nu  " Line numbers on
set numberwidth=5      " don't plan on editing files longer than 65535 lines
set nowrap  " Line wrapping on
set linebreak "Break lines a little smarter
set textwidth=79
set colorcolumn=+1
set wildmode=longest:full,full
" set cursorline
set noshowmode

" These can affect plugins (beware)
nnoremap j gj
nnoremap k gk

" ---------------
" Behaviors
" ---------------
set history=768        " Number of things to remember in history.
set cf                 " Enable error files & error jumping.
set clipboard+=unnamed " Yanks go on clipboard instead.
set timeoutlen=1000    " Time to wait for a command (after leader for example)
set foldlevelstart=99  " Remove folds
set formatoptions=crql

" ---------------
" Text Format
" ---------------
set tabstop=2
set shiftwidth=2  " Tabs under smart indent
set expandtab
set backspace=2

" ---------------
" Searching
" ---------------
set smartcase " Case insensitive search
set nohlsearch

" ---------------
" Visual
" ---------------
set matchtime=2 " How many tenths of a second to blink

" ---------------
" Sounds
" ---------------
set noerrorbells
set novisualbell

" ---------------
" Mouse
" ---------------
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes

" Window Movement
" nmap <silent> <C-h> :wincmd h<CR>
" nmap <silent> <C-j> :wincmd j<CR>
" nmap <silent> <C-k> :wincmd k<CR>
" nmap <silent> <C-l> :wincmd l<CR>

" source vimrc and runtime
nmap <silent> <leader>v :Runtime<CR>

" ----------------------------------------
" Auto Commands
"
if has("autocmd")
  " disable auto-wrap when editing .vimrc
  autocmd BufRead .vimrc :set formatoptions-=c

  " auto-wrap when editing text files
  autocmd BufRead *.txt :set formatoptions+=a

  " No more complaining about untitled documents
  autocmd FocusLost * nested silent! wall

  " When editing a file, always jump to the last cursor position.
  " This must be after the uncompress commands.
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line ("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

  " strip trailing whitespace
  autocmd BufWritePre * :%s/\s\+$//e

  " recognize Markdown
  autocmd BufNewFile,BufRead *.md  set filetype=markdown

  " recognize Apple sandbox files
  autocmd BufRead *.sb             setf scheme

  " recognize haml and hamlc
  autocmd BufNewFile,BufRead *.hamlc  setf haml

  autocmd FileType json syntax match Comment +\/\/.\+$+

  augroup tags
    au BufWritePost *.hs            silent !init-tags %
    au BufWritePost *.hsc           silent !init-tags %
  augroup END
endif

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" https://ariejan.net/2012/03/21/from-11-34s-to-0-625s-for-opening-a-rb-file-in-vim/
if !empty($MY_RUBY_HOME)
let g:ruby_path = join(split(glob($MY_RUBY_HOME.'/lib/ruby/*.*')."\n"
  \ .glob($MY_RUBY_HOME.'/lib/ruby/site_ruby/*.*')."\n"
  \ .glob($MY_RUBY_HOME.'/lib/ruby/vendor_ruby/*.*')."\n"
  \ .glob($MY_RUBY_HOME.'/lib/ruby/user-gems/*.*'),"\n"),',')
endif

set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set fillchars=vert:│

set keymap=russian-jcukenwin
" remap layout switch
" imap <C-L> <C-^>
" setlocal spell spelllang=ru_yo,en_us
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Blue

set foldmethod=indent

nnoremap ! :Clam<space>
vnoremap ! :ClamVisual<space>

if exists("GitGrep")
  nmap <Leader>A :GitGrep<space>
endif

nmap <c-w><c-c> <c-w>c
nmap <c-c><c-;> <c-w>c

set undodir=~/.cache/vim/undo
set directory=~/.cache/vim/swap

let g:browser = 'open'

function! OpenGitHub(keyword)
let url = 'https://github.com/'.a:keyword
exec '!' g:browser url '&'
endfunction
noremap gGH :call OpenGitHub(expand('<cWORD>'))<CR><CR>

nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

nmap <C-x>g :Gstatus<CR>
nmap <C-x>; :

" autocmd BufRead .vimrc :PlugInstall

" Emacs/bash-like navigation/editing in command and insert modes
noremap! <C-a>  <Home>
noremap! <C-e>  <End>
noremap! <C-b>  <Left>
noremap! <C-f>  <Right>
noremap! <C-d>  <Delete>
noremap! <M-b>  <S-Left>
noremap! <M-f>  <S-Right>
noremap! <M-d>  <S-right><Delete>
" iunmap   <C-G>s
" iunmap   <C-G>S
" noremap! <C-g>  <C-c>

autocmd FileType html call s:html_my_settings()
function! s:html_my_settings()
  " Close html tags automatically
  inoremap <buffer> <lt>/ </<C-X><C-O>
endfunction

let g:airline#extensions#tmuxline#enabled = 1
let g:semanticTermColors = [
      \ 1,2,3,4,5,6,17,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,
      \ 40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,
      \ 63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,
      \ 86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,
      \ 107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,
      \ 124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,
      \ 141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
      \ 158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
      \ 175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
      \ 192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,
      \ 209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,
      \ 226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,
      \ 243,244,245,246,247,248,249,250,251,252,253,254,255]

" http://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
" Open new split panes to right and bottom, which feels more natural than Vim’s default:

" always keep cursor in the middle
set scrolloff=5

set splitbelow
set splitright
set ttyfast
set lazyredraw

nmap <F8> :TagbarToggle<CR>
nmap <leader>h :Dash<CR>

" fast ag search for word under cursor
nmap <leader><leader>a yiw:Ag <c-r>"<cr>

" save file shortcut
map <C-s> :w<CR>

let g:haskell_indent_do = 3
let g:haskell_indent_in = 1
let g:haskell_indent_where = 6
let g:haskell_indent_let = 4
let g:haskell_indent_case = 2
let g:haskell_indent_if = 3
let g:cabal_indent_section = 2

command! FormatJSON %!python -m json.tool

map <C-p> :Files<CR>
" map q <Nop>

let g:airline#extensions#ale#enabled = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

map ]z :tabnext<CR>
map [z :tabprevious<CR>

"
" Consolidated Coc settings, see https://github.com/neoclide/coc.nvim#example-vim-configuration
"
" TextEdit might fail if hidden is not set.
set hidden             " Change buffer - without saving

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

function! Dark()
  silent !osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode=true"
	set background=dark
endfunction

function! Light()
  silent !osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode=false"
	set background=light
endfunction

command! Dark call Dark()
command! Light call Light()

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }
